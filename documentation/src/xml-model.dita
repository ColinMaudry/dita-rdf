<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_rwg_sny_gp">
 <title>The XML tree</title>
 <shortdesc>XML is versatile but limited by its tree model</shortdesc>
 <conbody>
 	<p>The <xref format="html" href="http://www.w3.org/TR/2008/REC-xml-20081126/" scope="external">Extensible Markup Language</xref> is a standard text format that was
 	published by the W3C in 1998 and updated several times.</p>
 	<p>His strengths are the following:</p><ul id="ul_xgp_prx_gp">
 		<li>W3C standard, which pushed software vendors to align on the support of the specifications</li>
 		<li>Core of a number of related standards to query, validating and transform XML content (XSLT, XML Schemas, XQuery, XProc)</li>
 		<li>Endless extendibility, via DTD, XML Schemas or RelaxNG</li>
 		<li>Since it's plain text it's easy to handle with any text editor</li>
 	</ul><p>XML is based on a tree model. Here is the same data as described above, but in
 		XML:</p><pre xml:space="preserve">&lt;families>
	&lt;family familyName="Landais">
		&lt;parents>
			&lt;father id="3">
				&lt;firstName>Eric&lt;/firstName>
				&lt;age>34&lt;/age>
				&lt;goesToEvents>
					&lt;event href="events.xml#5"/>
				&lt;/goesToEvents>
			&lt;/father>
			&lt;mother id="4">
				&lt;firstName>Olga&lt;/firstName>
				&lt;age>35&lt;/age>
				&lt;goesToEvents>
					&lt;event href="events.xml#5"/>
					&lt;event href="events.xml#8"/>
				&lt;/goesToEvents>
			&lt;/mother>
		&lt;/parents>
		&lt;children>
			&lt;daughter id="2">
				&lt;firstName>SalomÃ©&lt;/firstName>
				&lt;age>9&lt;/age>
				&lt;goesToEvents>
					&lt;event href="events.xml#11"/>
				&lt;/goesToEvents>
			&lt;/daughter>
			&lt;son id="1">
				&lt;firstName>Isaac&lt;/firstName>
				&lt;age>5&lt;/age>
			&lt;/son>
		&lt;/children>
	&lt;/family>
	&lt;family familyName="Todorov">
		&lt;parents>
		...
		&lt;/parents>
		&lt;children>
			&lt;daughter id="2">
				&lt;firstName>Olga&lt;/firstName>
				&lt;age>35&lt;/age>
				&lt;goesToEvents>
					&lt;event href="events.xml#5"/>
					&lt;event href="events.xml#8"/>
				&lt;/goesToEvents>
			&lt;/daughter>
			&lt;son id="5">
				&lt;firstName>Boris&lt;/firstName>
				&lt;age>42&lt;/age>
				&lt;goesToEvents>
					&lt;event href="events.xml#8"/>
				&lt;/goesToEvents>
			&lt;/son>
		&lt;/children>
	&lt;/family>
&lt;/families>
			</pre><p>This
				is one of the many possibilities to structure this information in XML. After thinking a lot, I went for a structure that focuses on parents and children. The problem here
				is that each person that has children (in this case Olga) needs to be represented twice: as a parent and as a child.</p>
		<p>Also, although the events are identified with a unique events ID, it is necessary to know how to resolve the references to get information about the events. it is not
			self-explanatory.</p><p>Storing a flat list of elements, one per person,
					using IDs to represent all relationships, would address the issue with duplicate entries... </p><p>
						<pre xml:space="preserve">&lt;persons>
	&lt;person id="4" parents="10,11" siblings="5" spouse="3" children="1,2">
		&lt;firstName>Olga&lt;/firstName>
		&lt;lastName>Landais&lt;/lastName>
		&lt;age>35&lt;/age>
	&lt;/person>
	...
&lt;/persons></pre>
					</p><p>...but would result in two annoying issues, the consequences of using XML for a purpose it wasn't designed for:</p><p>
						<ul id="ul_y4l_2jy_gp">
							<li>slow retrieval of information: since the relationships don't rely on the tree features of XML but on identifiers, for each "hop" between two persons, the whole file
								would have to be scanned to locate the identifier of the target person. </li>
							<li>That would be like reproducing the table model in XML, with its drawbacks.</li>
						</ul>
					</p><p>So, as we know, XML is a very versatile format, but, as we just saw,  its tree model doesn't faciliate the cross referencing of information as the only direct
						relations that XML can express between two nodes of information are the following:</p><p><ul id="ul_mdr_51y_gp">
							<li>parent</li>
							<li>child</li>
							<li>attribute</li>
						</ul>The rest are the result of interpretations which require communication, agreement and extra coding effort.</p><p>For instance, using our family information, how do we find the names of Boris' nephews? It is possible, but the query to write is much more complex than the piece of information
			we try to retrieve. We could also change the structure of the document to adapt it to answer this specific question, but that wouldn't be without a new load of trade-offs to
			answer other questions.</p>
 </conbody>
</concept>
