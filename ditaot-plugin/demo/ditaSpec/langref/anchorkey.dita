<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "reference.dtd">
<?Pub Sty _display FontColor="red"?>
<reference id="anchorkey" xml:lang="en-us">
<title>anchorkey</title>
<shortdesc>The &lt;<keyword>anchorkey</keyword>> element allows an
author to define a conref target that will be resolved dynamically
when rendered for an end user of the content. This element is useful
when doing an initial process of the DITA content prior to final rendering
of the content; it allows specified keys to be preserved after that
process, and conref relationships which use that key will not be resolved
during that initial process.</shortdesc>
<prolog><metadata>
<keywords><indexterm>anchorkey</indexterm></keywords>
</metadata></prolog>
<refbody>
<section><p>When a keyref attribute is specified on an anchorkey element,
it indicates that any conref relationships using that key will not
be resolved. Applications that support run-time resolution of conref
with keys will then be able to dynamically resolve this conref at
display time.</p><p>There is no difference between specifying anchorkey
within a map (in topicmeta) and specifying anchorkey within a topic.
In both cases, processors are instructed to delay resolution of that
key for the current set of information. However, the best practice
is to only use anchorkey within a map. If it is specified in a topic,
that topic will define a usage for the key for every user of that
topic. This makes the topic less portable, because users that do not
want to delay resolution of that specific key will not be able to
include the topic in their information.</p><p
conref="exportanchors.dita#exportanchors/disclaimer"></p></section>
<section id="contains" conref="../common/commonNavLibraryTable.dita#contentmodel-anchorkey/contains" otherprops="contains"><title>Contains</title><p>The
content model of this element may differ based on where it is used.
Content model information is located here: <xref
keyref="anchorkey-contains"></xref></p></section>
<section id="containedby" conref="../common/commonNavLibraryTable.dita#contentmodel-anchorkey/containedby" otherprops="containedby"><title>Contained
By</title><p>The parents of this element may differ based on where
it is used. Content model information is located here: <xref
keyref="anchorkey-contained-by"></xref></p></section>
<section id="inheritance" otherprops="inheritance"><title>Inheritance</title><p>+
topic/keyword delay-d/anchorkey </p></section>
<example id="example"><title>Example</title><p>In this example, a
set of information contains multiple components. Some references to
component A use keys rather than a direct reference, so that conref
can be redirected to a different component when component A is not
installed. The keys may be exported, in addition to the IDs, so that
some references become bound to the actual component while other references
may be redirected.</p><codeblock>&lt;map>
  &lt;topicref keys="componentAconfig commonconfig" 
            href="componentA/configA.dita#configA">
    &lt;topicmeta>
      &lt;exportanchors>
        &lt;anchorkey keyref="commonconfig"/>
        &lt;anchorid id="step1"/>
        &lt;anchorid id="step2"/>
      &lt;/exportanchors>
    &lt;/topicmeta>
  &lt;/topicref>
&lt;/map></codeblock><p>The keys attributes declares two distinct
keys that may be used to refer to this topic (componentAconfig and
commonconfig). Only the second is preserved using anchorkey. A task
topic from another component may reuse steps within this topic in
a variety of ways.</p><codeblock>&lt;steps>
  &lt;step conkeyref="componentAconfig/step1">&lt;cmd/>&lt;/step>
  &lt;step conkeyref="componentAconfig/step1.5">&lt;cmd/>&lt;/step>
  &lt;step conkeyref="commonconfig/step2">&lt;cmd/>&lt;/step>
  &lt;step conkeyref="commonconfig/step2.5">&lt;cmd/>&lt;/step>
  &lt;step>&lt;cmd>And that is the end of that&lt;/cmd>
&lt;/steps></codeblock><ul>
<li>The componentAconfig key is not preserved, so the first step becomes <codeph>&lt;step
conref="componentA/configA.dita#configA/step1">&lt;cmd/>&lt;/step></codeph>.
At that point the anchorid element instructs the step1 ID to be preserved;
for runtime applications which support it, this relationship will
be preserved in the processed DITA output.</li>
<li>The second step with the same key becomes <codeph>&lt;step conref="componentA/configA.dita#configA/step1.5">&lt;cmd/>&lt;/step></codeph>.
However, conref relationships to step1.5 are not preserved, so this
conref should be resolved into static content.</li>
<li>For step three, the map instructs that both the key commonconfig
and the ID step2 should be preserved in any content generated for
this DITA topic. For formats that support runtime resolution through
keys, a process must convert the conkeyref value into an equivalent
value for that format.</li>
<li>Although resolution for the key used in step four is delayed,
the specific element that is referenced should not be delayed. Thus
the fourth step becomes <codeph>&lt;step conref="componentA/configA.dita#configA/step2.5">&lt;cmd/>&lt;/step></codeph>.
This value is then processed as an ordinary conref value.</li>
</ul><p>This allows the information assembler to resolve references
that must be to componentA while deferring references that can be
fulfilled by alternative component content.</p><note>This example
demonstrates why the anchorid element cannot reference an element
with the usual topicid/elementid format. If the two anchorid elements
in the example had been set to config/step1 and config/step2, then
they would only ever apply in a topic with id="config". It would not
be possible to redirect the key to another topic, but still preserve
conref behaviors as desired.<?Pub Caret?></note><note>Although it
is not specifically called out in this example, it is possible to
delay conref resolution for an entire topic using the key. If conkeyref
on a task topic element is set to "componentAconfig", which <i>is
not</i> delayed, the conref will be evaluated as usual. However, if
conkeyref on the task is set to "commonconfig", which <i>is</i> delayed,
resolution of conref on that element should be delayed by a processor.</note></example>
<section id="attributes"><title>Attributes</title><simpletable
id="attribute_table" relcolwidth="2* 3* 1* 1* 1*">
<sthead>
<stentry>Name</stentry>
<stentry>Description</stentry>
<stentry>Data Type</stentry>
<stentry>Default Value</stentry>
<stentry>Required?</stentry>
</sthead>
<strow conref="../common/commonLRdefs.dita#commonLRdefs/keyref-anchorkey">
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
</strow>
<strow conref="../common/commonLRdefs.dita#commonLRdefs/univ-atts">
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
</strow>
<strow conref="../common/commonLRdefs.dita#commonLRdefs/classandout">
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
</strow>
<strow conref="../common/commonLRdefs.dita#commonLRdefs/global-atts">
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
</strow>
</simpletable></section>
</refbody>
</reference>
