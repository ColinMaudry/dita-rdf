<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<concept id="xsdGeneralCodingReq" xml:lang="en-us">
  <title>General element type declaration coding requirements<?Pub Caret?></title>
  <shortdesc>Structural and element domain vocabulary modules <keyword>must</keyword> reflect the
    same coding requirements for element type declarations.</shortdesc>
  <conbody>
    <p>
      <draft-comment author="sethpark"  id="commentf2">[Jeff, 3 Jan 2010] I don't
        think it makes sense to have both a section for "General element type declaration coding
        requirements" and another for "Element domain module coding requirements". We should either
        combine them or give them better titles and otherwise reword them to make it clear what they
        are about what how they differ from each other. I'd favor combining them. I'm none too sure
        about the differences between the other sections on "Structural" and "Topic type" module
        coding requirements either. There seems as if there is a good deal over overlap between the
        sections, which I find confusing</draft-comment>
    </p>
    <section>
      <title>Module names</title>
      <p>Each vocabulary module has a short name that is used to construct file names, entity names,
        and other names used in associated declarations.</p>
      <p>For structural modules, the module name <term>must</term> be the element type name of the
        top-level topic or map type defined by the module, such as "concept", "bookmap".</p>
      <p>For element domain modules, the module name <term>must</term> be a name that reflects the
        subject domain to which the domain applies, such as "highlight", "software". Domain module
        names should be sufficiently unique that they are unlikely to conflict with any other
        domains.</p>
      <p>For attribute domain modules, the module name <term>must</term> be the name of the
        attribute defined by the module plus "Att" (to avoid conflict with similarly-named
        structural types or element domains).</p>
    </section>
    <section id="section_AF5B8ABA77DA4474A0AF0DF0AFD8E018">
      <title>Element definitions</title>
      <p>A structural or domain vocabulary module <term>must</term> contain a declaration for each
        specialized element type named by the module. While the XSD standard allows content models
        to refer to undeclared element types, all element types named in content models within a
        vocabulary module <term>must</term> have an xs:element declaration, either in the vocabulary
        module, in a base module of which the vocabulary module is a direct or indirect
        specialization, or, for structural modules, in a required domain module. The specialized
        elements <term>must</term> follow the rules of the architecture in defining content models
        and attributes.</p>
      <p
        rev="public-review-1">Domain modules <term>must</term> consist of a single XSD document named <filepath><varname>modulename</varname>Mod.xsd</filepath>. Structural modules <term>must</term> consist of two modules, <filepath><varname>modulename</varname>Grp.xsd</filepath>, which contains all element name groups, and <filepath><varname>modulename</varname>Mod.xsd</filepath>, which contains all other declarations for the module.</p>
      <p>For each element type declared in the vocabulary module there must be an xs:group whose
        name is the element type name and whose one member is a reference to the element type,
        e.g.:<codeblock>&lt;xs:group name="codeph">
  &lt;xs:sequence>
    &lt;xs:choice>
      &lt;xs:element ref="codeph"/>
    &lt;/xs:choice>
  &lt;/xs:sequence>
&lt;/xs:group></codeblock></p>
      <p>The element name group provides a layer of abstraction that facilitates redefinition. A
        document type shell can redefine an element group to add domain-specialized elements or
        replace a base element type with one or more specializations of that type.</p>
      <p
        rev="public-review-1">For domain modules, the group definitions <term>should</term> be grouped together at the start of the domain's XSD document. The definitions <term>may</term> occur in any order.</p>
      <p>Each element type <term>must</term> have a corresponding content model group named
            <codeph><i>tagname</i>.content</codeph>. The value of the group <term>must</term> be the
        complete content model definition. For
        example:<codeblock>&lt;xs:group name="codeph.content">
  &lt;xs:sequence>
    &lt;xs:choice minOccurs="0" maxOccurs="unbounded">
      &lt;xs:group ref="basic.ph.notm" minOccurs="0"/>
      &lt;xs:group ref="data.elements.incl" minOccurs="0"/>
      &lt;xs:group ref="foreign.unknown.incl" minOccurs="0"/>
    &lt;/xs:choice>
  &lt;/xs:sequence>
&lt;/xs:group></codeblock></p>
      <p>The content model group <term>may</term> be overridden in constraint modules to further
        constrain the content model for the element type.</p>
      <p>Each element type <term>must</term> have a corresponding attribute group named
            <codeph><i>tagname</i>.attributes</codeph>. The group must declare all attributes used
        by the element type except for the @class attribute. For
        example:<codeblock>&lt;xs:attributeGroup name="codeph.attributes">
  &lt;xs:attribute name="outputclass" type="xs:string"/>
  &lt;xs:attributeGroup ref="global-atts"/>
  &lt;xs:attributeGroup ref="univ-atts"/>
&lt;/xs:attributeGroup></codeblock></p>
      <p>Each element type <term>must</term> have a complex type definition named
            <codeph><varname>tagname</varname>.class</codeph>, which references the
            <codeph><varname>tagname</varname>.content</codeph> and
            <codeph><varname>tagname</varname>.attributes</codeph> groups. For
        example:<codeblock>&lt;xs:complexType name="codeph.class" mixed="true">
  &lt;xs:sequence>  
    &lt;xs:group ref="codeph.content"/>
  &lt;/xs:sequence>        
  &lt;xs:attributeGroup ref="codeph.attributes"/>
&lt;/xs:complexType></codeblock></p>
      <p>Each element type must have an xs:element declaration named
            <codeph><varname>tagname</varname></codeph>, that uses as its type the
            <codeph><varname>tagname</varname>.class</codeph> complex type and extends that complex
        type to add the class attribute for the element. For
        example:<codeblock>&lt;xs:element name="codeph">
  &lt;xs:annotation>
    &lt;xs:documentation>
      The code phrase (&amp;lt;&lt;keyword>codeph&lt;/keyword>&amp;gt;) element represents a snippet
      of code within the main flow of text. The code phrase may be displayed in
      a monospaced font for emphasis. This element is part of the DITA programming
      domain, a special set of DITA elements designed to document programming tasks,
      concepts and reference information.
    &lt;/xs:documentation>
  &lt;/xs:annotation>
  &lt;xs:complexType mixed="true">
    &lt;xs:complexContent>
      &lt;xs:extension base="codeph.class">
        &lt;xs:attribute ref="class" default="+ topic/ph pr-d/codeph "/>
      &lt;/xs:extension>
    &lt;/xs:complexContent>
  &lt;/xs:complexType>
&lt;/xs:element></codeblock></p>
      <p>The content model group, attribute group, complex type, and element type definition for an
        element <term>should</term> be grouped together within the module. Each such group of
        declarations may occur in any order within the module. It is recommended to sort the element
        type definitions alphabetically or group them into categories. Here is an example
        declaration for the &lt;codeblock>
        element:<codeblock>  &lt;xs:element name="codeblock">
    &lt;xs:annotation>
      &lt;xs:documentation>
        The &amp;lt;&lt;keyword>codeblock&lt;/keyword>&amp;gt; element represents lines of
        program code. Like the &lt;ph>
          &lt;xref href="xref.xml">&amp;lt;&lt;keyword>pre&lt;/keyword>&amp;gt;&lt;/xref>
        &lt;/ph> element,
        content of this element has preserved line endings and is output in a monospaced
        font. This element is part of the DITA programming domain, a special set of
        DITA elements designed to document programming tasks, concepts and reference
        information.
      &lt;/xs:documentation>
    &lt;/xs:annotation>
    &lt;xs:complexType mixed="true">
      &lt;xs:complexContent>
        &lt;xs:extension base="codeblock.class">
          &lt;xs:attribute ref="class" default="+ topic/pre pr-d/codeblock "/>
        &lt;/xs:extension>
      &lt;/xs:complexContent>
    &lt;/xs:complexType>
  &lt;/xs:element>
  
  &lt;xs:complexType name="codeblock.class" mixed="true">
        &lt;xs:sequence>
          &lt;xs:group ref="codeblock.content"/>
        &lt;/xs:sequence>
        &lt;xs:attributeGroup ref="codeblock.attributes"/>
  &lt;/xs:complexType>
  
  &lt;xs:group name="codeblock.content">
    &lt;xs:sequence>
      &lt;xs:choice minOccurs="0" maxOccurs="unbounded">
          &lt;xs:group ref="basic.ph.notm" minOccurs="0"/>
          &lt;xs:group ref="coderef" minOccurs="0"/>
          &lt;xs:group ref="txt.incl" minOccurs="0"/>
          &lt;xs:group ref="data.elements.incl" minOccurs="0"/>
          &lt;xs:group ref="foreign.unknown.incl" minOccurs="0"/>
        &lt;/xs:choice>
    &lt;/xs:sequence>
  &lt;/xs:group>
  
  &lt;xs:attributeGroup name="codeblock.attributes">
    &lt;xs:attribute name="outputclass" type="xs:string"/>
        &lt;xs:attribute name="spectitle" type="xs:string"/>
        &lt;xs:attributeGroup ref="display-atts"/>
        &lt;xs:attributeGroup ref="univ-atts"/>
        &lt;xs:attribute ref="xml:space" fixed="preserve"/>
        &lt;xs:attributeGroup ref="global-atts"/>
  &lt;/xs:attributeGroup></codeblock></p>
      <p>Each xs:element declaration <term>should</term> include descriptive documentation as in the
        examples above.</p>
    </section>
  </conbody>
</concept>
<?Pub *0000008920?>
