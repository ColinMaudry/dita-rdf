<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2009, v.4002-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<concept id="map-to-map-cascading-of-metadata" xml:lang="en-us">
<title>Map-to-map cascading behaviors</title>
<shortdesc>When a DITA map (or branch of a DITA map) is referenced
by another DITA map, by default, certain rules apply. These rules
pertain to the cascading behaviors of attributes, metadata elements,
and roles assigned to content (such as the role of "Chapter" assigned
by a &lt;chapter> element). Attributes and elements that cascade within
a map generally follow the same rules when cascading from one map
to another map; this topic covers the exceptions and additional rules
that apply.</shortdesc>
<conbody>
<section><title>Cascading of attributes from map to map</title><p>The
following attributes cascade within a single map:<ul
conref="cascading-in-a-ditamap.dita#cascading-in-a-ditamap/attrlist">
<li></li>
</ul></p><p>Of these, the following attributes <b>do not</b> cascade
from map to map:<ul>
<li>@format: this attribute must be set to "ditamap" in order to reference
a map or a branch of a map, so it cannot cascade through to the referenced
map.</li>
<li>@xml:lang and @dir: cascading behavior for xml:lang is defined in <xref href="xmllang.dita"/>.
                        The @dir and translate attributes work the same way.</li>
<li>@scope: the @scope value describes the map itself, rather than
the content. A @scope value of "external" indicates that the referenced
map itself is external and unavailable, so the value cannot cascade
into that referenced map.</li>
</ul></p><p>The @class attribute does not cascade within a map, but
is used to determine processing roles that cascade from map to map.
See <xref href="#map-to-map-cascading-of-metadata/roles"></xref> for
more details.</p><p>As with values that cascade within a map, the
cascading is additive if the attribute permits multiple values (such
as @audience). When the attribute only permits one value, the cascading
value overrides the top-level element.</p></section>
<example><title>Example of attributes cascading between maps</title><p>For
example, assume the following references in <filepath>test.ditamap</filepath>:<codeblock>&lt;map>
  &lt;topicref href="a.ditamap" format="ditamap" toc="no"/>
  &lt;mapref   href="b.ditamap" audience="developer"/>
  &lt;topicref href="c.ditamap#branch1" format="ditamap" print="no"/>
  &lt;mapref   href="c.ditamap#branch2" platform="myPlatform"/>
&lt;/map></codeblock></p><ul>
<li>The map <filepath>a.ditamap</filepath> is treated as if toc="no"
is specified on the root &lt;map> element. This means that the topics
that are referenced by <filepath>a.ditamap</filepath> do not appear
in the navigation generated by <filepath>test.ditamap</filepath> (except
for branches within the map that explicitly set toc="yes").</li>
<li>The map <filepath>b.ditamap</filepath> is treated as if audience="developer"
is set on the root &lt;map> element. If the audience attribute is
already set on the root &lt;map> element within <filepath>b.ditamap</filepath>,
the value "developer" is added to any existing values.</li>
<li>The element with id="branch1" within the map <filepath>c.ditamap</filepath> is
treated as if print="no" is specified on that element. This means
that the topics within the branch with id="branch1" do not appear
in the printed output generated by <filepath>test.ditamap</filepath> (except
for nested branches within that branch that explicitly set print="yes").</li>
<li>The element with id="branch2" within the map <filepath>c.ditamap</filepath> is
treated as if platform="myPlatform" is specified on that element.
If the @platform attribute is already specified on the element with
id="branch", the value "myPlatform" is added to existing values.</li>
</ul></example>
<section><title>Cascading of metadata elements</title><p>Elements
that are contained within &lt;topicmeta> or &lt;metadata> follow the
same rules for cascading as apply within a single DITA map. For a
complete list of which elements cascade within a map, see the column
"<ph
conref="reconciling-topic-and-map-metadata.dita#reconciling-topic-and-map-metadata/doesitcascade"></ph>"
in the topic <xref href="reconciling-topic-and-map-metadata.dita"></xref>.</p><p>For
example, consider the following code snippets:</p><fig><title><filepath>test-2.ditamap</filepath></title>
<codeblock>&lt;map>
    &lt;topicref href="a.ditamap" format="ditamap">
        &lt;topicmeta>
            &lt;shortdesc>This map contains information about Acme defects.&lt;/shortdesc>
        &lt;/topicmeta>
    &lt;/topicref>
    &lt;topicref href="b.ditamap" format="ditamap">
        &lt;topicmeta>
            &lt;audience type="programmer"/>
        &lt;/topicmeta>
    &lt;/topicref>    
    &lt;mapref href="c.ditamap" format="ditamap"/>
    &lt;mapref href="d.ditamap" format="ditamap"/>
    &lt;/map></codeblock>
</fig><fig><title>b.ditamap</title>
<codeblock>&lt;map>
    &lt;topicmeta>
        &lt;audience type="writer"/>
    &lt;/topicmeta>
    &lt;topicref href="b-1.dita"/>
    &lt;topicref href="b-2.dita"/>
&lt;/map>
</codeblock>
</fig><p>When <filepath>test-2.ditamap</filepath> is processed, the
following behaviour occurs:<ul>
<li>Because the &lt;shortdesc> element does not cascade, it does not
apply to the DITA topics that are referenced in <filepath>a.ditamap</filepath>.</li>
<li>Because the &lt;audience> element cascades, the &lt;audience>
element in the reference to <filepath>b.ditamap</filepath> combines
with the &lt;audience> attribute that is already specified at the
top level of that map. The result is that the <filepath>b-1.dita</filepath> topic
and <filepath>b-2.dita</filepath> topic are processed as if they each
contained the following child &lt;topicmeta> element:<codeblock>&lt;topicmeta>
    &lt;audience type="programmer"/>
    &lt;audience type="writer"/>
&lt;/topicmeta></codeblock></li>
</ul></p><note>It is possible that a specialization might define metadata
that should replace rather than add to metadata in the referenced
map, but DITA (by default) does not currently support this behavior.</note></section>
<section id="roles"><title>Cascading of roles in specialized maps</title><p>When
a &lt;topicref> element or a specialization of a &lt;topicref> element
references a DITA resource, it defines a role for that resource. In
some cases this role is straightforward, such as when a &lt;topicref>
element references a DITA topic (giving it the already known role
of "topic"), or when a &lt;mapref> element references a DITA map (giving
it the role of "DITA map").</p><p>Unless otherwise instructed, a specialized
topicref element that references a map supplies a role for the referenced
content. This means that, in effect, the @class attribute of the referencing
element cascades to top-level topicref elements in the referenced
map. In situations where this should not happen - such as all elements
from the OASIS-supplied "mapgroup" domain - the non-default behavior
should be clearly specified.</p><p>For example, when a &lt;chapter>
element from the bookmap specialization references a map, it supplies
a role of "chapter" for each top-level element in the referenced map.
When the &lt;chapter> element references a branch in another map,
it supplies a role of "chapter" for that branch. In effect, the @class
attribute for &lt;chapter> ("- map/topicref bookmap/chapter ") cascades
to the top-level topicref in the nested map, although it does not
cascade any further.</p><p>Alternatively, the &lt;mapref> element
in the "mapgroup" domain  is a convenience element; the top-level &lt;topicref>
elements in the map referenced by a &lt;mapref> element <keyword>must
not</keyword> be processed as if they are &lt;mapref> elements. The
@class attribute from the &lt;mapref> element ("+ map/topicref mapgroup-d/mapref
") does not cascade to the referenced map.</p><p>In some cases, preserving
the role of the referencing element might result in out-of-context
content. For example, a &lt;chapter> element that references a bookmap
might pull in &lt;part> elements that contain nested &lt;chapter>
elements. Treating the &lt;part> element as a &lt;chapter> will result
in a chapter that nests other chapters, which is not valid in bookmap
and may not be understandable by processors. The result is implementation
specific; processors may or may not choose to treat this as an error,
issue a warning, or simply assign new roles to the problematic elements.</p></section>
<example><title>Example of cascading roles between maps</title><p>Consider
the scenario of a &lt;chapter> element that references a DITA map.
This scenario could take several forms:<dl><dlentry>
<dt>Referenced map contains a single top-level &lt;topicref> element</dt>
<dd>The entire branch functions as if it were included in the bookmap;
the top-level &lt;topicref> element is processed as if it were the
&lt;chapter> element.</dd>
</dlentry><dlentry>
<dt>Referenced map contains multiple top-level &lt;topicref> elements</dt>
<dd>Each top-level &lt;topicref> element is processed as if it were
a &lt;chapter> element (the referencing element).</dd>
</dlentry><dlentry>
<dt>Referenced map contains a single &lt;appendix> element</dt>
<dd>The &lt;appendix> element is processed as it were a &lt;chapter>
element.</dd>
</dlentry><dlentry>
<dt>Referenced map contains a single &lt;part> element, with nested
&lt;chapter> elements.</dt>
<dd>The &lt;part> element is processed as it were a chapter element.
Nested &lt;chapter> elements may not be understandable by processors;
applications may recover as described above.</dd>
</dlentry><dlentry>
<dt>&lt;chapter> element references a single &lt;topicref> element
rather than a map</dt>
<dd>The referenced &lt;topicref> element is processed as if it were
a &lt;chapter> element.</dd>
</dlentry></dl><?Pub Caret 933?></p></example>
</conbody>
</concept>
<?Pub *0000010039?>
